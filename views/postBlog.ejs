<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body {
            background: #222f3e;
        }

        form {
            padding: .5rem;
            background: #222f3e;

        }

        #form-cont {
            display: flex;
            flex-direction: column;
            height: 10rem;
            justify-content: space-evenly;
        }

        #form-cont>div {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

        #form-cont label {
            width: 100px;
            text-align: right;
            margin-right: 10px;
            color: white;
        }

        #form-cont input,
        #form-cont textarea,
        #form-cont select {
            flex: 1;
            border-radius: .5rem;
            background: #d7d7d778;
            padding: .3rem;
        }

        button {
            font-weight: bold;
            font-size: 1.4rem;
            background: darkcyan;
            border-radius: 1rem;
            padding: 0.3rem;
            width: 12rem;
            border: none;
        }

        input::placeholder {
            color: black;
        }

        textarea::placeholder {
            color: black;
        }
    </style>
</head>

<body>
    <%- include('../public/loader.html'); %>
        <form action="" id="editor" method="post" enctype="multipart/form-data">
            <h1 style="text-align: center; color: white; margin: .8rem;">Post a blog</h1>
            <div id="form-cont">
                <div><label for="title">Title : </label> <input type="text" id="title"
                        placeholder="add a title for your blog..."
                        value="<%= typeof blog !== 'undefined' && blog.title ? blog.title : '' %>" required></div>
                <div><label for="description">Description : </label> <textarea name="description" id="description"
                        cols="30" rows="3" style="resize:none;" placeholder="this description will show in blog tiles."
                        required><%= typeof blog !== 'undefined' && blog.description ? blog.description : '' %></textarea>
                </div>
                <div>
                    <div><label for="title">Cover image : </label> <input type="file" id="coverImage" name="coverImage"
                            placeholder="add a cover image for your blog..."  <%= typeof blog === 'undefined' ? 'required' : '' %>>>
                    </div>
                </div>
            </div>
            <div id="blog-post-editor" name="content"></div>
            <div style="display: flex; justify-content: center; margin-top: .3rem;"><button type="submit">Create
                    post</button></div>
        </form>

        <script src="https://cdn.tiny.cloud/1/<%= tinymce %>/tinymce/7/tinymce.min.js" referrerpolicy="origin"></script>
        <script>
            const url = window.location.href;
            const segments = url.split('/');
            const blogId = segments[segments.length - 1];
            const objectIdRegex = /^[0-9a-fA-F]{24}$/;

            tinymce.init({
                selector: '#blog-post-editor',
                skin: 'oxide-dark',
                plugins: ['preview', 'wordcount', 'table', 'searchreplace', 'media', 'image'],
                toolbar: ['undo redo | styleselect | bold italic | alignleft aligncenter alignright | bullist numlist | link image | preview | wordcount | table tabledelete | tableprops tablerowprops tablecellprops | tableinsertrowbefore tableinsertrowafter tabledeleterow | tableinsertcolbefore tableinsertcolafter tabledeletecol | searchreplace | media '],
                /* enable title field in the Image dialog*/
                image_title: true,
                /* enable automatic uploads of images represented by blob or data URIs*/
                automatic_uploads: true,
                /*
                  URL of our upload handler (for more details check: https://www.tiny.cloud/docs/configure/file-image-upload/#images_upload_url)
                  images_upload_url: 'postAcceptor.php',
                  here we add custom filepicker only to Image dialog
                */
                file_picker_types: 'image',
                /* and here's our custom image picker*/
                file_picker_callback: (cb, value, meta) => {
                    const input = document.createElement('input');
                    input.setAttribute('type', 'file');
                    input.setAttribute('accept', 'image/*');

                    input.addEventListener('change', (e) => {
                        const file = e.target.files[0];

                        const reader = new FileReader();
                        reader.addEventListener('load', () => {
                            /*
                              Note: Now we need to register the blob in TinyMCEs image blob
                              registry. In the next release this part hopefully won't be
                              necessary, as we are looking to handle it internally.
                            */
                            const id = 'blobid' + (new Date()).getTime();
                            const blobCache = tinymce.activeEditor.editorUpload.blobCache;
                            const base64 = reader.result.split(',')[1];
                            const blobInfo = blobCache.create(id, file, base64);
                            blobCache.add(blobInfo);

                            /* call the callback and populate the Title field with the file name */
                            cb(blobInfo.blobUri(), { title: file.name });
                        });
                        reader.readAsDataURL(file);
                    });

                    input.click();
                },
                setup: function (editor) {
                    editor.on('init', function () {
                        editor.setContent(`<%- typeof blog !== 'undefined' && blog.blogContent ? blog.blogContent : '' %>`);
                    });
                }
            });

            document.querySelector("form").addEventListener('submit', async (event) => {
                event.preventDefault();
                document.getElementById('loader-container-container').style.display = "block"
                try {
                    const editor = await tinymce.get('blog-post-editor');
                    if (editor && typeof editor.getContent === 'function') {

                        // Create a FormData object
                        const formData = new FormData();
                        formData.append('title', document.getElementById('title').value);
                        formData.append('description', document.getElementById('description').value);
                        formData.append('coverImage', document.getElementById('coverImage').files[0]); // Get the file
                        formData.append('blogContent', editor.getContent());
                        if (objectIdRegex.test(blogId)) {
                            formData.append('blogId', blogId);
                        }


                            const response = await fetch('/dashbord/postBlog/saveBlog', {
                                method: 'POST',
                                body: formData // Send the FormData object
                            });
                            document.getElementById('loader-container-container').style.display = "none"
                            if (!response.ok) {
                                throw new Error(`HTTP error! status: ${response.status}`);
                            }
                            const result = await response.json();
                            if (result.success) {
                                alert('Blog post successfully submitted.');
                                window.location.href = "/dashbord/myBlogs";
                            }
                        } else {
                            alert('Internal server error. Please try again later.');
                            console.error('Editor instance not found or does not have getContent method!');
                        }
                    } catch (error) {
                        document.getElementById('loader-container-container').style.display = "none"
                        console.error('Error submitting form:', error.message, error.stack);
                        alert('Error submitting form. Please try again later.');
                    }
                });

        </script>
</body>

</html>